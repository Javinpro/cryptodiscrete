# -*- coding: utf-8 -*-
"""Cryptography Math Discrete

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PsomwTRgyc-jUzeNAGLiMlHcdDdhfktH
"""

import hashlib

# Function to generate keys B1, B2, B3, B4 from a secret key
def generate_keys(secret_key):
    """
    Generates 4 binary keys (B1, B2, B3, B4) from the secret_key.
    We take the first 4 bytes from a SHA-256 hash of the secret key.
    """
    hash_key = hashlib.sha256(secret_key.encode()).digest()
    B1 = hash_key[0]
    B2 = hash_key[1]
    B3 = hash_key[2]
    B4 = hash_key[3]
    return B1, B2, B3, B4

# Function to encrypt or decrypt using XOR operation
def xor_encrypt_decrypt(value, keys):
    """
    Encrypt or decrypt using XOR chain with keys.
    Encryption Rule: ((((A XOR B1) XOR B2) XOR B3) XOR B4)
    Decryption follows the same process.
    """
    result = value
    for key in keys:
        result ^= key  # Apply XOR sequentially with all keys
    return result

# Example usage
if __name__ == "__main__":
    # Step 1: Define the secret key and convert plaintext "halo" to integer representation
    secret_key = "maka"
    plaintext_str = "halo"

    # Convert plaintext to integer representation
    plaintext = int.from_bytes(plaintext_str.encode(), 'big')

    # Step 2: Generate keys (B1, B2, B3, B4) from the secret key
    B1, B2, B3, B4 = generate_keys(secret_key)
    keys = [B1, B2, B3, B4]

    # Step 3: Encrypt the plaintext
    ciphertext = xor_encrypt_decrypt(plaintext, keys)

    # Step 4: Decrypt the ciphertext to get back the original plaintext
    decrypted_text = xor_encrypt_decrypt(ciphertext, keys)

    # Convert decrypted integer back to string
    decrypted_str = decrypted_text.to_bytes((decrypted_text.bit_length() + 7) // 8, 'big').decode()

    # Output the results
    print(f"Secret Key: {secret_key}")
    print(f"Plaintext (A): {plaintext_str}")
    print(f"Generated Keys (B1, B2, B3, B4): {B1}, {B2}, {B3}, {B4}")
    print(f"Ciphertext (C): {ciphertext}")
    print(f"Decrypted Text: {decrypted_str}")